services:
  # MailHog - testowy serwer email z interfejsem webowym
  mailhog:
    image: mailhog/mailhog:latest
    container_name: test-mailserver
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    environment:
      - MH_STORAGE=memory
      - MH_SMTP_BIND_ADDR=0.0.0.0:1025
      - MH_API_BIND_ADDR=0.0.0.0:8025
      - MH_UI_BIND_ADDR=0.0.0.0:8025
    networks:
      - email-test-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Dovecot - serwer IMAP dla testów
  dovecot:
    build:
      context: ./dovecot
      dockerfile: Dockerfile
    container_name: test-imap-server
    ports:
      - "143:143"   # IMAP
      - "993:993"   # IMAPS
    environment:
      - MAIL_USER=test@localhost
      - MAIL_PASS=testpass123
    volumes:
      - maildata:/var/mail
      - ./dovecot/config:/etc/dovecot
    networks:
      - email-test-network
    depends_on:
      - mailhog

  # Generator danych testowych
  email-generator:
    build:
      context: .
      dockerfile: Dockerfile.generator
    container_name: email-generator
    env_file:
      - .env
    environment:
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - NUM_EMAILS=100
      - SPAM_RATIO=0.2
    networks:
      - email-test-network
    depends_on:
      mailhog:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs

  # Bot organizujący emaile
  email-organizer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: email-organizer-bot
    env_file:
      - .env
    environment:
      - EMAIL_ADDRESS=test@localhost
      - EMAIL_PASSWORD=testpass123
      - IMAP_SERVER=dovecot
      - IMAP_PORT=143
      - MODE=organizer
      - SIMILARITY_THRESHOLD=${SIMILARITY_THRESHOLD:-0.25}
      - MIN_CLUSTER_SIZE=${MIN_CLUSTER_SIZE:-2}
      - MIN_CLUSTER_FRACTION=${MIN_CLUSTER_FRACTION:-0.10}
      - CROSS_SPAM_SIMILARITY=${CROSS_SPAM_SIMILARITY:-0.6}
      - CROSS_SPAM_SAMPLE_LIMIT=${CROSS_SPAM_SAMPLE_LIMIT:-200}
      - CATEGORY_MATCH_SIMILARITY=${CATEGORY_MATCH_SIMILARITY:-0.5}
      - CATEGORY_SENDER_WEIGHT=${CATEGORY_SENDER_WEIGHT:-0.2}
      - CATEGORY_SAMPLE_LIMIT=${CATEGORY_SAMPLE_LIMIT:-50}
      - CLEANUP_EMPTY_CATEGORY_FOLDERS=${CLEANUP_EMPTY_CATEGORY_FOLDERS:-true}
      - TFIDF_MAX_FEATURES=${TFIDF_MAX_FEATURES:-100}
      - STOPWORDS=${STOPWORDS:-none}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CONTENT_MIN_CHARS=${CONTENT_MIN_CHARS:-40}
      - CONTENT_MIN_TOKENS=${CONTENT_MIN_TOKENS:-6}
    networks:
      - email-test-network
    depends_on:
      - dovecot
      - email-generator
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
    # command handled by entrypoint

  # Bot odpowiadający na emaile
  email-responder:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: email-responder-bot
    env_file:
      - .env
    environment:
      - EMAIL_ADDRESS=test@localhost
      - EMAIL_PASSWORD=testpass123
      - IMAP_SERVER=dovecot
      - SMTP_SERVER=mailhog
      - MODEL_NAME=Qwen/Qwen2.5-7B-Instruct
      - MODE=responder
    networks:
      - email-test-network
    depends_on:
      - email-organizer
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./models:/app/models
    # command handled by entrypoint

  # Testy integracyjne
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: test-runner
    env_file:
      - .env
    environment:
      - EMAIL_ADDRESS=test@localhost
      - EMAIL_PASSWORD=testpass123
      - IMAP_SERVER=dovecot
      - SMTP_SERVER=mailhog
      - MAILHOG_API=http://mailhog:8025
    networks:
      - email-test-network
    depends_on:
      - mailhog
      - dovecot
    volumes:
      - ./test-results:/app/test-results
      - ./logs:/app/logs
    command: ["pytest", "-v", "--cov=.", "--cov-report=html:/app/test-results/coverage"]

networks:
  email-test-network:
    driver: bridge

volumes:
  maildata: