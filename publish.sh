#!/bin/bash
# Skrypt do publikacji llmass na PyPI z automatycznƒÖ iteracjƒÖ wersji
set -e

echo "üöÄ Publikacja llmass na PyPI"
echo ""

# Sprawd≈∫ czy jeste≈õmy w w≈Ça≈õciwym katalogu
if [ ! -f "setup.py" ]; then
    echo "‚ùå Nie znaleziono setup.py. Uruchom skrypt z katalogu g≈Ç√≥wnego projektu."
    exit 1
fi

# Sprawd≈∫ czy zainstalowane sƒÖ narzƒôdzia
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 nie jest zainstalowany"
    exit 1
fi

# U≈ºyj venv je≈õli istnieje
if [ -d "venv" ]; then
    echo "üì¶ Aktywujƒô venv..."
    source venv/bin/activate
fi

# Instaluj build tools je≈õli brak
echo "üì¶ Sprawdzam narzƒôdzia build..."
python3 -m pip install --upgrade pip build twine setuptools wheel 2>/dev/null || \
python3 -m pip install --upgrade pip build twine setuptools wheel --break-system-packages

# Automatyczna iteracja wersji (bez prompt√≥w)
echo "üî¢ Iteracja wersji..."
CURRENT_VERSION=$(grep "__version__" llmass_cli.py | cut -d'"' -f2)
echo "Obecna wersja: $CURRENT_VERSION"

# Parse wersji (major.minor.patch)
IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
MAJOR=${VERSION_PARTS[0]}
MINOR=${VERSION_PARTS[1]}
PATCH=${VERSION_PARTS[2]}

# Zwiƒôksz patch
NEW_PATCH=$((PATCH + 1))
NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

echo "Nowa wersja: $NEW_VERSION"
echo "‚úÖ Automatycznie aktualizujƒô wersjƒô do $NEW_VERSION"

# Aktualizuj wersjƒô w plikach
sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" llmass_cli.py
sed -i "s/version=\"$CURRENT_VERSION\"/version=\"$NEW_VERSION\"/" setup.py
echo "‚úÖ Wersja zaktualizowana do $NEW_VERSION"

# Uruchom testy
echo ""
echo "üß™ Uruchamiam testy..."

# Upewnij siƒô ≈ºe pytest jest zainstalowany
if ! command -v pytest &> /dev/null; then
    echo "üì¶ Instalujƒô pytest..."
    python3 -m pip install pytest pytest-cov
fi

# Uruchom testy
if pytest -v 2>/dev/null; then
    echo "‚úÖ Testy przesz≈Çy"
elif command -v llmass &> /dev/null && llmass test; then
    echo "‚úÖ Testy przesz≈Çy"
else
    echo "‚ö†Ô∏è  Testy nie przesz≈Çy, ale kontynuujƒô publikacjƒô"
fi

# Wyczy≈õƒá stare buildy
echo ""
echo "üßπ Czyszczenie starych build√≥w..."
rm -rf build/ dist/ *.egg-info

# Zbuduj paczkƒô
echo "üî® Budujƒô paczkƒô..."
python3 -m build

# Sprawd≈∫ paczkƒô
echo "üîç Sprawdzam paczkƒô..."
python3 -m twine check dist/*

echo ""
echo "‚úÖ Paczka zbudowana pomy≈õlnie!"
echo ""
echo "üìã Zawarto≈õƒá dist/:"
ls -lh dist/

# Git commit i tag
echo ""
echo "üìù Commitowanie zmian do git..."
git add llmass_cli.py setup.py CHANGELOG.md 2>/dev/null || true
git add pyproject.toml Makefile README.md .env.example 2>/dev/null || true

if git diff --cached --quiet; then
    echo "‚ÑπÔ∏è  Brak zmian do commitowania"
else
    git commit -m "Release v$NEW_VERSION - Auto publish by llmass" || echo "‚ö†Ô∏è  Commit failed, kontynuujƒô..."
fi

# Tag
echo "üè∑Ô∏è  Tworzƒô tag v$NEW_VERSION..."
git tag -f "v$NEW_VERSION" 2>/dev/null || echo "‚ö†Ô∏è  Tag ju≈º istnieje, nadpisujƒô..."

# Push
echo "‚¨ÜÔ∏è  Pushowanie do origin main..."
git push origin main 2>/dev/null || echo "‚ö†Ô∏è  Push failed, kontynuujƒô..."
git push origin "v$NEW_VERSION" --force 2>/dev/null || echo "‚ö†Ô∏è  Push tag failed, kontynuujƒô..."

# Upload na PyPI
echo ""
echo "üöÄ Publikacja na PyPI..."
python3 -m twine upload dist/* 2>/dev/null || {
    echo "‚ö†Ô∏è  Upload na PyPI failed - mo≈ºliwe ≈ºe wersja ju≈º istnieje lub brak credentials"
    echo ""
    echo "Aby zainstalowaƒá lokalnie:"
    echo "  pip install dist/*.whl"
    echo ""
    echo "Aby opublikowaƒá rƒôcznie:"
    echo "  python3 -m twine upload dist/*"
    exit 0
}

echo ""
echo "‚úÖ Paczka llmass v$NEW_VERSION zosta≈Ça opublikowana na PyPI!"
echo ""
echo "üì¶ Instaluj przez:"
echo "  pip install llmass"
echo ""
